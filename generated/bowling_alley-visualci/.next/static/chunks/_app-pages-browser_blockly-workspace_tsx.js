"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_blockly-workspace_tsx"],{

/***/ "(app-pages-browser)/./blockly-code-generator.tsx":
/*!************************************!*\
  !*** ./blockly-code-generator.tsx ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EcoreGenerator: () => (/* binding */ EcoreGenerator)\n/* harmony export */ });\n// Code generator for Ecore blocks\n// This file contains the code generator for the Ecore blocks\nlet generatorInitialized = false;\n// Add this at the top of the file, after the generatorInitialized variable\nfunction generateRandomId() {\n    return Math.floor(10000 + Math.random() * 90000).toString();\n}\nclass EcoreGenerator {\n    // Initialize the generator\n    static init() {\n        // Prevent multiple initializations\n        if (generatorInitialized) {\n            return;\n        }\n        // Create a namespace for our generator functions\n        if (!window.Blockly.Ecore) {\n            window.Blockly.Ecore = {};\n        }\n        // Define generator functions for each block type\n        this.defineGenerators();\n        // Mark as initialized\n        generatorInitialized = true;\n        console.log(\"Ecore generator initialized successfully\");\n    }\n    // Define generator functions for all block types\n    static defineGenerators() {\n        const Ecore = window.Blockly.Ecore;\n        // Pipeline block generator\n        Ecore[\"ecore_pipeline\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"default_pipeline\";\n            const concurrent = block.getFieldValue(\"ATTR_CONCURRENT\") === \"TRUE\";\n            // Get connected blocks\n            const whenBlock = block.getInputTargetBlock(\"CONT_WHEN\");\n            const jobBlock = block.getInputTargetBlock(\"CONT_JOB\");\n            const toolBlock = block.getInputTargetBlock(\"CONT_TOOL\");\n            const envBlock = block.getInputTargetBlock(\"CONT_ENVIRONMENT\");\n            const permBlock = block.getInputTargetBlock(\"CONT_PERMISSION\");\n            // Generate code with proper indentation\n            let code = \"# Pipeline: \".concat(name, \"\\n\");\n            code += \"name: \".concat(name, \"\\n\");\n            // Only include concurrent if it's true\n            if (concurrent) {\n                code += \"concurrent: \".concat(concurrent, \"\\n\");\n            }\n            code += \"\\n\";\n            // Add when blocks if present\n            if (whenBlock) {\n                const whenCode = window.Blockly.Ecore.blockToCode(whenBlock);\n                code += whenCode;\n            }\n            // Add job blocks if present\n            if (jobBlock) {\n                code += \"jobs:\\n\";\n                const jobCode = window.Blockly.Ecore.blockToCode(jobBlock);\n                code += jobCode;\n            }\n            // Add tool blocks if present\n            if (toolBlock) {\n                code += \"tools:\\n\";\n                const toolCode = window.Blockly.Ecore.blockToCode(toolBlock);\n                code += toolCode;\n            }\n            // Add environment blocks if present\n            if (envBlock) {\n                code += \"env:\\n\";\n                const envCode = window.Blockly.Ecore.blockToCode(envBlock);\n                code += envCode;\n            }\n            // Add permission blocks if present\n            if (permBlock) {\n                code += \"permissions:\\n\";\n                const permCode = window.Blockly.Ecore.blockToCode(permBlock);\n                code += permCode;\n            }\n            return code;\n        };\n        // Job block generator\n        Ecore[\"ecore_job\"] = (block)=>{\n            let name = block.getFieldValue(\"ATTR_NAME\");\n            if (!name || name.trim() === \"\") {\n                name = \"job_\".concat(generateRandomId());\n            }\n            const allowFailure = block.getFieldValue(\"ATTR_ALLOWFAILURE\") === \"TRUE\";\n            // We're not using the description as requested\n            // const description = block.getFieldValue(\"ATTR_DESCRIPTION\") || \"\"\n            // Get connected blocks\n            const toolBlock = block.getInputTargetBlock(\"CONT_TOOL\");\n            const commandBlock = block.getInputTargetBlock(\"CONT_COMMAND\");\n            const ifThenElseBlock = block.getInputTargetBlock(\"CONT_IFTHENELSE\");\n            const inputBlock = block.getInputTargetBlock(\"CONT_INPUT\");\n            const envBlock = block.getInputTargetBlock(\"CONT_ENVIRONMENT\");\n            const permBlock = block.getInputTargetBlock(\"CONT_PERMISSION\");\n            const outputBlock = block.getInputTargetBlock(\"REL_OUTPUT\");\n            const dependsBlock = block.getInputTargetBlock(\"REL_DEPENDS\");\n            // Generate code with proper indentation\n            let code = \"  \".concat(name, \":\\n\");\n            // Include description as a comment if it exists\n            const description = block.getFieldValue(\"ATTR_DESCRIPTION\") || \"\";\n            if (description) {\n                code += \"    # \".concat(description, \"\\n\");\n            }\n            // Use the tool name for runs-on if a tool is present\n            if (toolBlock) {\n                const toolName = toolBlock.getFieldValue(\"ATTR_NAME\");\n                if (toolName) {\n                    code += \"    runs-on: \".concat(toolName, \"\\n\");\n                }\n            }\n            // Only add continue-on-error if it's true\n            if (allowFailure) {\n                code += \"    continue-on-error: \".concat(allowFailure, \"\\n\");\n            }\n            // Add command blocks if present\n            if (commandBlock) {\n                code += \"    steps:\\n\";\n                const commandCode = window.Blockly.Ecore.blockToCode(commandBlock);\n                // Increase indentation for nested blocks\n                code += indentCode(commandCode, 3);\n            }\n            // Add ifThenElse blocks if present\n            if (ifThenElseBlock) {\n                code += \"    if:\\n\";\n                const ifThenElseCode = window.Blockly.Ecore.blockToCode(ifThenElseBlock);\n                // Increase indentation for nested blocks\n                code += indentCode(ifThenElseCode, 3);\n            }\n            // Add input blocks if present\n            if (inputBlock) {\n                code += \"    inputs:\\n\";\n                const inputCode = window.Blockly.Ecore.blockToCode(inputBlock);\n                // Increase indentation for nested blocks\n                code += indentCode(inputCode, 3);\n            }\n            // Add environment blocks if present\n            if (envBlock) {\n                code += \"    env:\\n\";\n                const envCode = window.Blockly.Ecore.blockToCode(envBlock);\n                // Increase indentation for nested blocks\n                code += indentCode(envCode, 3);\n            }\n            // Add permission blocks if present\n            if (permBlock) {\n                code += \"    permissions:\\n\";\n                const permCode = window.Blockly.Ecore.blockToCode(permBlock);\n                // Increase indentation for nested blocks\n                code += indentCode(permCode, 3);\n            }\n            // Add output blocks if present\n            if (outputBlock) {\n                const outputCode = window.Blockly.Ecore.blockToCode(outputBlock);\n                code += \"    outputs:\\n      - \".concat(outputCode.trim(), \"\\n\");\n            }\n            // Add depends blocks if present\n            if (dependsBlock) {\n                const dependsCode = window.Blockly.Ecore.blockToCode(dependsBlock);\n                code += \"    needs: [\".concat(dependsCode, \"]\\n\");\n            }\n            // Check for next job block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += nextCode;\n            }\n            return code;\n        };\n        // Job value block generator\n        Ecore[\"ecore_job_value\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"unnamed_job\";\n            return '\"'.concat(name, '\"');\n        };\n        // Command block generator\n        Ecore[\"ecore_command\"] = (block)=>{\n            let name = block.getFieldValue(\"ATTR_NAME\");\n            if (!name || name.trim() === \"\") {\n                name = \"command_\".concat(generateRandomId());\n            }\n            // Get connected blocks\n            const toolBlock = block.getInputTargetBlock(\"CONT_TOOL\");\n            const paramBlock = block.getInputTargetBlock(\"CONT_PARAMETER\");\n            const dependsBlock = block.getInputTargetBlock(\"REL_DEPENDS\");\n            // Generate code with proper indentation\n            let code = \"      - name: \".concat(name, \"\\n\");\n            // Add tool blocks if present\n            if (toolBlock) {\n                const toolCode = window.Blockly.Ecore.blockToCode(toolBlock);\n                const toolValue = toolCode.trim().replace(/\"/g, \"\") // Remove quotes\n                ;\n                // Check if this is a shell command (denoted by \"|\")\n                if (toolValue === \"|\") {\n                    // This is a shell command using |\n                    code += \"        run: |\\n\";\n                    // Add default shell command if no parameters are provided\n                    if (!paramBlock) {\n                        code += '          echo \"Running shell commands\"\\n';\n                        code += '          echo \"Current directory: $(pwd)\"\\n';\n                    } else {\n                        // For shell commands with parameters, we need to ensure each parameter is on a new line with correct indentation\n                        const paramCode = window.Blockly.Ecore.processShellParameters(paramBlock);\n                        code += paramCode;\n                    }\n                } else if (toolValue.includes(\"actions/\") || toolValue.includes(\"@v\")) {\n                    // This is a GitHub Actions tool - use the exact toolValue without modification\n                    code += \"        uses: \".concat(toolValue, \"\\n\");\n                    // Add appropriate default parameters based on the tool\n                    if (toolValue.includes(\"setup-python\") && !paramBlock) {\n                        code += \"        with:\\n\";\n                        code += \"          python-version: '3.x'  # Uses the latest stable 3.x version\\n\";\n                    } else if (toolValue.includes(\"setup-node\") && !paramBlock) {\n                        code += \"        with:\\n\";\n                        code += \"          node-version: '18.x'\\n\";\n                    } else if (toolValue.includes(\"setup-java\") && !paramBlock) {\n                        code += \"        with:\\n\";\n                        code += \"          distribution: 'temurin'\\n\";\n                        code += \"          java-version: '17'\\n\";\n                    } else if (paramBlock) {\n                        code += \"        with:\\n\";\n                        const paramCode = window.Blockly.Ecore.blockToCode(paramBlock);\n                        // Increase indentation for nested blocks\n                        code += indentCode(paramCode, 4);\n                    }\n                } else {\n                    // Regular tool - like yarn, npm, etc.\n                    let command = toolValue;\n                    // Add parameters in a single line with single space between them\n                    if (paramBlock) {\n                        // Get parameters and add them to the command\n                        const paramCode = window.Blockly.Ecore.processRegularParameters(paramBlock);\n                        command += \" \" + paramCode;\n                    }\n                    // Add the run command\n                    code += \"        run: \".concat(command, \"\\n\");\n                }\n            }\n            // Add depends blocks if present\n            if (dependsBlock) {\n                const dependsCode = window.Blockly.Ecore.blockToCode(dependsBlock);\n                code += \"        needs: [\".concat(dependsCode, \"]\\n\");\n            }\n            // Check for next command block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += nextCode;\n            }\n            return code;\n        };\n        // Command value block generator\n        Ecore[\"ecore_command_value\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"unnamed_command\";\n            return '\"'.concat(name, '\"');\n        };\n        // Environment block generator\n        Ecore[\"ecore_environment\"] = (block)=>{\n            const key = block.getFieldValue(\"ATTR_KEY\") || \"ENV_KEY\";\n            const value = block.getFieldValue(\"ATTR_VALUE\") || \"value\";\n            // Generate code with proper indentation\n            let code = \"  \".concat(key, ': \"').concat(value, '\"\\n');\n            // Check for next environment block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += nextCode;\n            }\n            return code;\n        };\n        // When block generator\n        Ecore[\"ecore_when\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"unnamed_trigger\";\n            const trigger = block.getFieldValue(\"ATTR_TRIGGER\") || \"\";\n            const timer = block.getFieldValue(\"ATTR_TIMER\") || \"\";\n            // Generate code with proper indentation\n            let code = \"on:\\n\";\n            // Handle workflow_dispatch trigger\n            if (trigger === \"workflow_dispatch\") {\n                code += \"  workflow_dispatch:\\n\";\n            } else if (trigger) {\n                code += \"  \".concat(trigger, \":\\n\");\n                code += \"    branches: [main]\\n\";\n            }\n            // Handle scheduled triggers\n            if (timer) {\n                code += \"  schedule:\\n\";\n                code += '    - cron: \"'.concat(timer, '\"\\n');\n            }\n            code += \"\\n\";\n            // Check for next when block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += nextCode;\n            }\n            return code;\n        };\n        // Artifact block generator\n        Ecore[\"ecore_artifact\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"unnamed_artifact\";\n            // For statement blocks, return full code\n            let code = \"      - name: \".concat(name, \"\\n\");\n            // Check for next artifact block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += nextCode;\n            }\n            return code;\n        };\n        // Artifact value block generator\n        Ecore[\"ecore_artifact_value\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"unnamed_artifact\";\n            return '\"'.concat(name, '\"');\n        };\n        // Job Tool block generator\n        Ecore[\"ecore_tool\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"unnamed_tool\";\n            // For statement blocks, return full code\n            let code = \"      - \".concat(name, \"\\n\");\n            // Check for next tool block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += nextCode;\n            }\n            return code;\n        };\n        // Command Tool value block generator\n        Ecore[\"ecore_tool_value\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"unnamed_tool\";\n            // Check if this is a shell command indicator\n            if (name === \"|\") {\n                return '\"|\"';\n            }\n            // Check if this is a GitHub Action (either starts with \"actions/\" or contains \"@v\")\n            if (name.startsWith(\"actions/\") || name.includes(\"@v\")) {\n                // Return the name as is - no special handling for different formats\n                return '\"'.concat(name, '\"');\n            }\n            return '\"'.concat(name, '\"');\n        };\n        // IfThenElse block generator\n        Ecore[\"ecore_ifthenelse\"] = (block)=>{\n            const condition = block.getFieldValue(\"ATTR_CONDITION\") || \"true\";\n            // Get connected blocks\n            const trueBlock = block.getInputTargetBlock(\"CONT_TRUE\");\n            const falseBlock = block.getInputTargetBlock(\"CONT_FALSE\");\n            // Generate code for GitHub Actions if conditions\n            let code = \"\";\n            // Add true branch if present\n            if (trueBlock) {\n                // Generate code for the true branch\n                const trueCode = window.Blockly.Ecore.blockToCode(trueBlock);\n                // Insert the condition after each \"- name:\" line\n                const lines = trueCode.split(\"\\n\");\n                let processedCode = \"\";\n                for(let i = 0; i < lines.length; i++){\n                    processedCode += lines[i] + \"\\n\";\n                    // If this is a \"- name:\" line, add the condition on the next line\n                    if (lines[i].trim().startsWith(\"- name:\") && i + 1 < lines.length) {\n                        // Insert condition before the next line (which is typically 'uses:' or 'run:')\n                        processedCode += \"        if: \".concat(condition, \"\\n\");\n                    }\n                }\n                code += processedCode;\n            }\n            // Add false branch if present\n            if (falseBlock) {\n                // Generate code for the false branch, with inverted condition\n                const invertedCondition = \"!(\".concat(condition, \")\");\n                const falseCode = window.Blockly.Ecore.blockToCode(falseBlock);\n                // Insert the inverted condition after each \"- name:\" line\n                const lines = falseCode.split(\"\\n\");\n                let processedCode = \"\";\n                for(let i = 0; i < lines.length; i++){\n                    processedCode += lines[i] + \"\\n\";\n                    // If this is a \"- name:\" line, add the inverted condition on the next line\n                    if (lines[i].trim().startsWith(\"- name:\") && i + 1 < lines.length) {\n                        // Insert inverted condition before the next line (which is typically 'uses:' or 'run:')\n                        processedCode += \"        if: \".concat(invertedCondition, \"\\n\");\n                    }\n                }\n                code += processedCode;\n            }\n            // Check for next block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += nextCode;\n            }\n            return code;\n        };\n        // If block generator\n        Ecore[\"ecore_if\"] = (block)=>{\n            // Get connected blocks\n            const commandBlock = block.getInputTargetBlock(\"CONT_COMMAND\");\n            const ifThenElseBlock = block.getInputTargetBlock(\"CONT_IFTHENELSE\");\n            // Generate code\n            let code = \"\";\n            // Add command blocks if present\n            if (commandBlock) {\n                const commandCode = window.Blockly.Ecore.blockToCode(commandBlock);\n                code += commandCode;\n            }\n            // Add ifThenElse blocks if present\n            if (ifThenElseBlock) {\n                const ifThenElseCode = window.Blockly.Ecore.blockToCode(ifThenElseBlock);\n                code += ifThenElseCode;\n            }\n            return code;\n        };\n        // Else block generator\n        Ecore[\"ecore_else\"] = (block)=>{\n            // Get connected blocks\n            const commandBlock = block.getInputTargetBlock(\"CONT_COMMAND\");\n            const ifThenElseBlock = block.getInputTargetBlock(\"CONT_IFTHENELSE\");\n            // Generate code\n            let code = \"\";\n            // Add command blocks if present\n            if (commandBlock) {\n                const commandCode = window.Blockly.Ecore.blockToCode(commandBlock);\n                code += commandCode;\n            }\n            // Add ifThenElse blocks if present\n            if (ifThenElseBlock) {\n                const ifThenElseCode = window.Blockly.Ecore.blockToCode(ifThenElseBlock);\n                code += ifThenElseCode;\n            }\n            return code;\n        };\n        // Parameter block generator\n        Ecore[\"ecore_parameter\"] = (block)=>{\n            const parameter = block.getFieldValue(\"ATTR_PARAMETER\") || \"param\";\n            // Get the parent block\n            const parentBlock = block.getParent();\n            // Check if parent is a command block and its tool is \"|\"\n            let isShellCommand = false;\n            let isRegularCommand = false;\n            if (parentBlock && parentBlock.type === \"ecore_command\") {\n                const toolBlock = parentBlock.getInputTargetBlock(\"CONT_TOOL\");\n                if (toolBlock && toolBlock.type === \"ecore_tool_value\") {\n                    const toolName = toolBlock.getFieldValue(\"ATTR_NAME\");\n                    isShellCommand = toolName === \"|\";\n                    isRegularCommand = toolName !== \"|\" && !toolName.includes(\"actions/\") && !toolName.includes(\"@v\");\n                }\n            }\n            // Generate code with proper indentation based on parent\n            let code;\n            if (isShellCommand) {\n                // For shell commands, each parameter is a new line of the script\n                code = \"          \".concat(parameter, \"\\n\");\n            } else if (isRegularCommand) {\n                // For regular commands like yarn, just return the parameter\n                code = \"\".concat(parameter);\n            } else {\n                // Regular parameter format for \"with:\" sections\n                code = \"          \".concat(parameter, \"\\n\");\n            }\n            // Check for next parameter block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += nextCode;\n            }\n            return code;\n        };\n        // Add a special function to handle shell command parameters\n        Ecore.processShellParameters = (paramBlock)=>{\n            if (!paramBlock) {\n                return \"\";\n            }\n            // Get all parameters as a single string\n            const paramCode = window.Blockly.Ecore.blockToCode(paramBlock);\n            // Split into lines and indent each line properly\n            const paramLines = paramCode.split(\"\\n\");\n            let indentedParams = \"\";\n            for (const line of paramLines){\n                if (line.trim()) {\n                    // Add exactly 10 spaces (8 spaces + 2 for proper level) for each shell command\n                    indentedParams += \"          \".concat(line.trim(), \"\\n\");\n                }\n            }\n            return indentedParams;\n        };\n        // Add a special function to handle regular command parameters\n        Ecore.processRegularParameters = (paramBlock)=>{\n            if (!paramBlock) {\n                return \"\";\n            }\n            // Get all parameters as a single string\n            const paramCode = window.Blockly.Ecore.blockToCode(paramBlock);\n            // Split into lines and join with a single space\n            const params = paramCode.trim().split(\"\\n\").filter((line)=>line.trim()).map((line)=>line.trim()).join(\" \");\n            return params;\n        };\n        // Permission block generator\n        Ecore[\"ecore_permission\"] = (block)=>{\n            const key = block.getFieldValue(\"ATTR_KEY\") || \"PERM_KEY\";\n            const value = block.getFieldValue(\"ATTR_VALUE\") || \"value\";\n            // Generate code with proper indentation\n            let code = \"  \".concat(key, \": \").concat(value, \"\\n\");\n            // Check for next permission block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += nextCode;\n            }\n            return code;\n        };\n        // Job dependency block generator\n        Ecore[\"ecore_job_dependency\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"unnamed_job\";\n            // Start with the current job name\n            let code = '\"'.concat(name, '\"');\n            // Check for next dependency block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += \", \".concat(nextCode);\n            }\n            return code;\n        };\n        // Command dependency block generator\n        Ecore[\"ecore_command_dependency\"] = (block)=>{\n            const name = block.getFieldValue(\"ATTR_NAME\") || \"unnamed_command\";\n            // Start with the current command name\n            let code = '\"'.concat(name, '\"');\n            // Check for next dependency block\n            const nextBlock = block.getNextBlock();\n            if (nextBlock) {\n                const nextCode = window.Blockly.Ecore.blockToCode(nextBlock);\n                code += \", \".concat(nextCode);\n            }\n            return code;\n        };\n        // Add a blockToCode function to handle any block\n        Ecore.blockToCode = (block)=>{\n            if (!block) {\n                return \"\";\n            }\n            // Check if there's a generator for this block type\n            if (Ecore[block.type]) {\n                return Ecore[block.type](block);\n            }\n            // Default case if no generator is found\n            console.warn(\"No generator found for block type: \".concat(block.type));\n            return \"\";\n        };\n    }\n    // Generate code from the workspace\n    static generateCode(workspace) {\n        // Make sure generators are initialized\n        this.init();\n        // Get all top-level blocks\n        const topBlocks = workspace.getTopBlocks(true);\n        // Generate code for each top-level block\n        let code = \"# Generated CI/CD Pipeline YAML\\n\";\n        code += \"# This YAML is compatible with GitHub Actions\\n\\n\";\n        for (const block of topBlocks){\n            if (window.Blockly.Ecore[block.type]) {\n                code += window.Blockly.Ecore.blockToCode(block);\n            }\n        }\n        return code;\n    }\n}\n// Helper function to indent code\nfunction indentCode(code, indentLevel) {\n    const indent = \"  \".repeat(indentLevel);\n    return code.split(\"\\n\").map((line)=>{\n        if (line.trim() === \"\") return line;\n        return indent + line;\n    }).join(\"\\n\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./blockly-code-generator.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./blockly-workspace.tsx":
/*!*******************************!*\
  !*** ./blockly-workspace.tsx ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/script */ \"(app-pages-browser)/./node_modules/next/dist/api/script.js\");\n/* harmony import */ var _ecore_blocks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ecore-blocks */ \"(app-pages-browser)/./ecore-blocks.tsx\");\n/* harmony import */ var _blockly_code_generator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./blockly-code-generator */ \"(app-pages-browser)/./blockly-code-generator.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n// Default pipeline configuration JSON\nconst DEFAULT_PIPELINE_JSON = {\n    blocks: {\n        languageVersion: 0,\n        blocks: [\n            {\n                type: \"ecore_pipeline\",\n                id: \"z[Ib{|:nKA_X-((s~Y7y\",\n                x: 75,\n                y: 24,\n                fields: {\n                    ATTR_NAME: \"default_pipeline\",\n                    ATTR_CONCURRENT: false\n                },\n                inputs: {\n                    CONT_WHEN: {\n                        block: {\n                            type: \"ecore_when\",\n                            id: \"DTaRHa_sIjpJ}I/yuaf3\",\n                            fields: {\n                                ATTR_NAME: \"on_workflow_dispatch\",\n                                ATTR_TRIGGER: \"workflow_dispatch\",\n                                ATTR_TIMER: \"\"\n                            }\n                        }\n                    },\n                    CONT_JOB: {\n                        block: {\n                            type: \"ecore_job\",\n                            id: \"g9%$Xvx-66h,Oh/PL!Ki\",\n                            fields: {\n                                ATTR_NAME: \"build\",\n                                ATTR_ALLOWFAILURE: false,\n                                ATTR_DESCRIPTION: \"Build and test the application\"\n                            },\n                            inputs: {\n                                CONT_TOOL: {\n                                    block: {\n                                        type: \"ecore_tool\",\n                                        id: \"fU!MZF|^*4yx9Zdg+SXA\",\n                                        fields: {\n                                            ATTR_NAME: \"ubuntu-latest\"\n                                        }\n                                    }\n                                },\n                                CONT_COMMAND: {\n                                    block: {\n                                        type: \"ecore_command\",\n                                        id: \"x~rd@7X]hL(FQntuYO:`\",\n                                        fields: {\n                                            ATTR_NAME: \"setup\"\n                                        },\n                                        inputs: {\n                                            CONT_TOOL: {\n                                                block: {\n                                                    type: \"ecore_tool_value\",\n                                                    id: \"R(v=JXNbA4YBt?wxmnPb\",\n                                                    fields: {\n                                                        ATTR_NAME: \"npm\"\n                                                    }\n                                                }\n                                            },\n                                            CONT_PARAMETER: {\n                                                block: {\n                                                    type: \"ecore_parameter\",\n                                                    id: \"w(*oscU@^g#t^yE5@C5V\",\n                                                    fields: {\n                                                        ATTR_PARAMETER: \"install\"\n                                                    },\n                                                    next: {\n                                                        block: {\n                                                            type: \"ecore_parameter\",\n                                                            id: \"N~m$CM,!TVZ+P.4Ai;aL\",\n                                                            fields: {\n                                                                ATTR_PARAMETER: \"install --ci\"\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        ]\n    }\n};\n// Add these constants at the top of the file, after the imports:\n// Constants for localStorage keys\nconst STORAGE_KEY_WORKSPACE = \"visualci_workspace\";\n// This component will be loaded dynamically to avoid SSR issues with Blockly\nconst BlocklyWorkspace = /*#__PURE__*/ _s((0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(_c = _s((param, ref)=>{\n    let { onChange, initialXml, onWorkspaceLoaded } = param;\n    _s();\n    const blocklyDiv = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [workspace, setWorkspace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [blocklyLoaded, setBlocklyLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Function to load the default pipeline structure\n    const loadDefaultPipeline = (workspace)=>{\n        try {\n            // Clear the workspace first\n            workspace.clear();\n            // Load the default pipeline JSON\n            window.Blockly.serialization.workspaces.load(DEFAULT_PIPELINE_JSON, workspace);\n            // Center the workspace on the pipeline block\n            const blocks = workspace.getTopBlocks(false);\n            if (blocks.length > 0) {\n                workspace.centerOnBlock(blocks[0].id);\n            }\n            return blocks[0] // Return the pipeline block\n            ;\n        } catch (error) {\n            console.error(\"Error loading default pipeline:\", error);\n            // Fallback to creating a simple pipeline if loading fails\n            const pipelineBlock = workspace.newBlock(\"ecore_pipeline\");\n            pipelineBlock.setFieldValue(\"default_pipeline\", \"ATTR_NAME\");\n            pipelineBlock.initSvg();\n            pipelineBlock.render();\n            pipelineBlock.moveBy(50, 50);\n            return pipelineBlock;\n        }\n    };\n    // Expose methods via ref\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle)(ref, {\n        \"BlocklyWorkspace.useImperativeHandle\": ()=>({\n                serializeWorkspace: ({\n                    \"BlocklyWorkspace.useImperativeHandle\": ()=>{\n                        if (!workspace) return \"\";\n                        try {\n                            // Serialize the workspace to JSON\n                            const json = window.Blockly.serialization.workspaces.save(workspace);\n                            const jsonString = JSON.stringify(json, null, 2);\n                            // Also save directly to localStorage to ensure it's always saved\n                            localStorage.setItem(STORAGE_KEY_WORKSPACE, jsonString);\n                            return jsonString;\n                        } catch (error) {\n                            console.error(\"Error serializing workspace:\", error);\n                            return \"\";\n                        }\n                    }\n                })[\"BlocklyWorkspace.useImperativeHandle\"],\n                loadWorkspace: ({\n                    \"BlocklyWorkspace.useImperativeHandle\": (jsonData)=>{\n                        if (!workspace) return;\n                        try {\n                            console.log(\"Loading workspace from JSON data\");\n                            // Clear the workspace first\n                            workspace.clear();\n                            // Parse the JSON data\n                            const json = JSON.parse(jsonData);\n                            // Load the workspace from JSON\n                            window.Blockly.serialization.workspaces.load(json, workspace);\n                            // Center the workspace view\n                            const blocks = workspace.getTopBlocks(false);\n                            if (blocks.length > 0) {\n                                workspace.centerOnBlock(blocks[0].id);\n                            }\n                            // Trigger onChange to update the generated code\n                            if (onChange) {\n                                const xml = window.Blockly.Xml.workspaceToDom(workspace);\n                                const xmlText = window.Blockly.Xml.domToText(xml);\n                                const code = _blockly_code_generator__WEBPACK_IMPORTED_MODULE_4__.EcoreGenerator.generateCode(workspace);\n                                onChange(xmlText, code);\n                            }\n                        } catch (error) {\n                            console.error(\"Error loading workspace from JSON:\", error);\n                            alert(\"Error loading workspace: Invalid JSON format or incompatible workspace data\");\n                        }\n                    }\n                })[\"BlocklyWorkspace.useImperativeHandle\"],\n                clearWorkspace: ({\n                    \"BlocklyWorkspace.useImperativeHandle\": ()=>{\n                        if (!workspace) return;\n                        // Just clear the workspace completely without loading the default pipeline\n                        workspace.clear();\n                        // Trigger onChange to update the generated code\n                        if (onChange) {\n                            const xml = window.Blockly.Xml.workspaceToDom(workspace);\n                            const xmlText = window.Blockly.Xml.domToText(xml);\n                            const code = _blockly_code_generator__WEBPACK_IMPORTED_MODULE_4__.EcoreGenerator.generateCode(workspace);\n                            onChange(xmlText, code);\n                        }\n                    }\n                })[\"BlocklyWorkspace.useImperativeHandle\"]\n            })\n    }[\"BlocklyWorkspace.useImperativeHandle\"]);\n    // Handle script load event\n    const handleScriptLoad = ()=>{\n        console.log(\"Blockly script loaded\");\n        setBlocklyLoaded(true);\n    };\n    // Initialize Blockly after the script has loaded\n    const initBlockly = ()=>{\n        if (!blocklyDiv.current || !window.Blockly) return;\n        try {\n            console.log(\"Initializing Blockly...\", window.Blockly);\n            // Register custom blocks\n            _ecore_blocks__WEBPACK_IMPORTED_MODULE_3__.ECORE_BLOCKS.forEach((block)=>{\n                window.Blockly.Blocks[block.type] = {\n                    init: function() {\n                        this.jsonInit(block);\n                    }\n                };\n            });\n            // Create workspace with responsive settings\n            const newWorkspace = window.Blockly.inject(blocklyDiv.current, {\n                toolbox: _ecore_blocks__WEBPACK_IMPORTED_MODULE_3__.ECORE_TOOLBOX,\n                grid: {\n                    spacing: 20,\n                    length: 3,\n                    colour: \"#ccc\",\n                    snap: true\n                },\n                zoom: {\n                    controls: true,\n                    wheel: true,\n                    startScale: window.innerWidth < 768 ? 0.7 : 1.0,\n                    maxScale: 3,\n                    minScale: 0.3,\n                    scaleSpeed: 1.2\n                },\n                trashcan: true,\n                scrollbars: true,\n                sounds: false,\n                move: {\n                    scrollbars: true,\n                    drag: true,\n                    wheel: true\n                },\n                // Enable strict type checking\n                typeCheck: true\n            });\n            // Add automatic block creation for job and command blocks\n            newWorkspace.addChangeListener((event)=>{\n                // Only handle block creation events\n                if (event.type === window.Blockly.Events.BLOCK_CREATE) {\n                    // Get the created block\n                    const block = newWorkspace.getBlockById(event.blockId);\n                    if (block) {\n                        // Check if this is a newly created block or a copied block\n                        // If it's a copied block, it will already have connections\n                        const isNewlyCreated = !event.ids || event.ids.length <= 1;\n                        // If a job block is created, automatically add a tool and command block to it\n                        if (block.type === \"ecore_job\") {\n                            // Add a tool block to the job if the tool input is empty\n                            if (!block.getInputTargetBlock(\"CONT_TOOL\")) {\n                                // Create a job tool block\n                                const jobToolBlock = newWorkspace.newBlock(\"ecore_tool\");\n                                jobToolBlock.initSvg();\n                                jobToolBlock.render();\n                                // Set a default name for the job tool\n                                jobToolBlock.setFieldValue(\"ubuntu-latest\", \"ATTR_NAME\");\n                                // Connect the tool block to the job block\n                                const jobToolConnection = block.getInput(\"CONT_TOOL\").connection;\n                                const jobToolBlockConnection = jobToolBlock.previousConnection;\n                                jobToolConnection.connect(jobToolBlockConnection);\n                            }\n                            // Check if the command input is empty\n                            if (!block.getInputTargetBlock(\"CONT_COMMAND\")) {\n                                // Create a command block\n                                const commandBlock = newWorkspace.newBlock(\"ecore_command\");\n                                commandBlock.initSvg();\n                                commandBlock.render();\n                                // Set a default name for the command\n                                commandBlock.setFieldValue(\"default_command\", \"ATTR_NAME\");\n                                // Connect the command block to the job block\n                                const commandConnection = block.getInput(\"CONT_COMMAND\").connection;\n                                const commandBlockConnection = commandBlock.previousConnection;\n                                commandConnection.connect(commandBlockConnection);\n                                // Create a command tool block for the command\n                                const toolBlock = newWorkspace.newBlock(\"ecore_tool_value\");\n                                toolBlock.initSvg();\n                                toolBlock.render();\n                                // Set a default name for the command tool\n                                toolBlock.setFieldValue(\"npm\", \"ATTR_NAME\");\n                                // Connect the tool block to the command block\n                                const toolConnection = commandBlock.getInput(\"CONT_TOOL\").connection;\n                                const toolBlockConnection = toolBlock.outputConnection;\n                                toolConnection.connect(toolBlockConnection);\n                                // Create a parameter block for the command\n                                const parameterBlock = newWorkspace.newBlock(\"ecore_parameter\");\n                                parameterBlock.initSvg();\n                                parameterBlock.render();\n                                // Set a default value for the parameter\n                                parameterBlock.setFieldValue(\"install\", \"ATTR_PARAMETER\");\n                                // Connect the parameter block to the command block\n                                const parameterConnection = commandBlock.getInput(\"CONT_PARAMETER\").connection;\n                                const parameterBlockConnection = parameterBlock.previousConnection;\n                                parameterConnection.connect(parameterBlockConnection);\n                            }\n                        } else if (block.type === \"ecore_command\" && isNewlyCreated) {\n                            // Only add child blocks if the command doesn't already have them\n                            // This prevents duplicate blocks when copying/pasting\n                            // Check if the tool input is empty\n                            if (!block.getInputTargetBlock(\"CONT_TOOL\")) {\n                                // Create a command tool block\n                                const toolBlock = newWorkspace.newBlock(\"ecore_tool_value\");\n                                toolBlock.initSvg();\n                                toolBlock.render();\n                                // Set a default name for the command tool\n                                toolBlock.setFieldValue(\"npm\", \"ATTR_NAME\");\n                                // Connect the tool block to the command block\n                                const commandBlock = block // Assign the block to commandBlock\n                                ;\n                                const toolConnection = commandBlock.getInput(\"CONT_TOOL\").connection;\n                                const toolBlockConnection = toolBlock.outputConnection;\n                                toolConnection.connect(toolBlockConnection);\n                            }\n                            // Check if the parameter input is empty\n                            if (!block.getInputTargetBlock(\"CONT_PARAMETER\")) {\n                                // Create a parameter block\n                                const parameterBlock = newWorkspace.newBlock(\"ecore_parameter\");\n                                parameterBlock.initSvg();\n                                parameterBlock.render();\n                                // Set a default value for the parameter\n                                parameterBlock.setFieldValue(\"install\", \"ATTR_PARAMETER\");\n                                // Connect the parameter block to the command block\n                                const parameterConnection = block.getInput(\"CONT_PARAMETER\").connection;\n                                const parameterBlockConnection = parameterBlock.previousConnection;\n                                parameterConnection.connect(parameterBlockConnection);\n                            }\n                        }\n                    }\n                }\n            });\n            // Check for saved workspace in localStorage first\n            const savedWorkspace = localStorage.getItem(STORAGE_KEY_WORKSPACE);\n            if (savedWorkspace) {\n                try {\n                    console.log(\"Found saved workspace in localStorage, loading it...\");\n                    // Parse and load the saved workspace\n                    const json = JSON.parse(savedWorkspace);\n                    window.Blockly.serialization.workspaces.load(json, newWorkspace);\n                    // Center the workspace on the first block\n                    const blocks = newWorkspace.getTopBlocks(false);\n                    if (blocks.length > 0) {\n                        newWorkspace.centerOnBlock(blocks[0].id);\n                    }\n                } catch (error) {\n                    console.error(\"Error loading workspace from localStorage:\", error);\n                    // If there's an error loading saved workspace, load the default pipeline\n                    loadDefaultPipeline(newWorkspace);\n                }\n            } else if (initialXml) {\n                // If no saved workspace but initialXml is provided, load that\n                const xml = window.Blockly.Xml.textToDom(initialXml);\n                window.Blockly.Xml.domToWorkspace(xml, newWorkspace);\n            } else {\n                // If no saved workspace or initialXml, load the default pipeline\n                console.log(\"No saved workspace found, loading default pipeline\");\n                loadDefaultPipeline(newWorkspace);\n            }\n            // Initialize the code generator\n            if (window.Blockly.Ecore === undefined) {\n                _blockly_code_generator__WEBPACK_IMPORTED_MODULE_4__.EcoreGenerator.init();\n            }\n            // Set up change listener with debounce to prevent rapid updates\n            let changeTimeout = null;\n            if (onChange) {\n                newWorkspace.addChangeListener((event)=>{\n                    // Only process events that change the workspace content\n                    if (event.type === window.Blockly.Events.BLOCK_MOVE || event.type === window.Blockly.Events.BLOCK_CHANGE || event.type === window.Blockly.Events.BLOCK_CREATE || event.type === window.Blockly.Events.BLOCK_DELETE) {\n                        // Clear previous timeout\n                        if (changeTimeout) {\n                            clearTimeout(changeTimeout);\n                        }\n                        // Set new timeout to debounce rapid changes\n                        changeTimeout = setTimeout(()=>{\n                            const xml = window.Blockly.Xml.workspaceToDom(newWorkspace);\n                            const xmlText = window.Blockly.Xml.domToText(xml);\n                            // Generate code using our custom generator\n                            const code = _blockly_code_generator__WEBPACK_IMPORTED_MODULE_4__.EcoreGenerator.generateCode(newWorkspace);\n                            onChange(xmlText, code);\n                        }, 300);\n                    }\n                });\n            }\n            // Handle window resize\n            const handleResize = ()=>{\n                window.Blockly.svgResize(newWorkspace);\n            };\n            window.addEventListener(\"resize\", handleResize);\n            // Store workspace for cleanup\n            setWorkspace(newWorkspace);\n            // Notify parent that workspace is loaded\n            if (onWorkspaceLoaded) {\n                onWorkspaceLoaded(newWorkspace);\n            }\n            // Return cleanup function\n            return ()=>{\n                window.removeEventListener(\"resize\", handleResize);\n                if (changeTimeout) {\n                    clearTimeout(changeTimeout);\n                }\n                if (newWorkspace) {\n                    newWorkspace.dispose();\n                }\n            };\n        } catch (error) {\n            console.error(\"Error initializing Blockly:\", error);\n        }\n    };\n    // Initialize Blockly when the component mounts and the script is loaded\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BlocklyWorkspace.useEffect\": ()=>{\n            if (blocklyLoaded && blocklyDiv.current && !workspace) {\n                initBlockly();\n            }\n        }\n    }[\"BlocklyWorkspace.useEffect\"], [\n        blocklyLoaded,\n        blocklyDiv,\n        workspace,\n        initialXml,\n        onChange,\n        onWorkspaceLoaded\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_script__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                src: \"https://cdn.jsdelivr.net/npm/blockly@11.2.2/blockly.min.js\",\n                onLoad: handleScriptLoad,\n                onError: (e)=>console.error(\"Error loading Blockly script:\", e),\n                strategy: \"afterInteractive\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\hugoa\\\\Desktop\\\\repos\\\\repos\\\\metamodel2blockly\\\\generated\\\\bowling_alley-visualci\\\\blockly-workspace.tsx\",\n                lineNumber: 485,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: blocklyDiv,\n                className: \"w-full h-full min-h-[300px] sm:min-h-[400px]\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\hugoa\\\\Desktop\\\\repos\\\\repos\\\\metamodel2blockly\\\\generated\\\\bowling_alley-visualci\\\\blockly-workspace.tsx\",\n                lineNumber: 491,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true);\n}, \"cIZADqA0C1zUU7wgEInH29/zbk4=\")), \"cIZADqA0C1zUU7wgEInH29/zbk4=\");\n_c1 = BlocklyWorkspace;\nBlocklyWorkspace.displayName = \"BlocklyWorkspace\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BlocklyWorkspace);\nvar _c, _c1;\n$RefreshReg$(_c, \"BlocklyWorkspace$forwardRef\");\n$RefreshReg$(_c1, \"BlocklyWorkspace\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./blockly-workspace.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./ecore-blocks.tsx":
/*!**************************!*\
  !*** ./ecore-blocks.tsx ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ECORE_BLOCKS: () => (/* binding */ ECORE_BLOCKS),\n/* harmony export */   ECORE_TOOLBOX: () => (/* binding */ ECORE_TOOLBOX),\n/* harmony export */   registerEcoreBlocks: () => (/* binding */ registerEcoreBlocks)\n/* harmony export */ });\n// Custom Ecore model blocks for Blockly\n// Generated automatically from metamodel\nconst ECORE_BLOCKS = [\n    {\n        \"type\": \"League\",\n        \"message0\": \"League name %1 player %2\",\n        \"args0\": [\n            {\n                \"type\": \"field_input\",\n                \"name\": \"name\",\n                \"text\": \"\"\n            },\n            {\n                \"type\": \"input_statement\",\n                \"name\": \"PLAYER\",\n                \"check\": [\n                    \"Player\"\n                ]\n            }\n        ],\n        \"colour\": 190,\n        \"previousStatement\": null,\n        \"nextStatement\": null\n    },\n    {\n        \"type\": \"Tournament\",\n        \"message0\": \"Tournament type %1 matchup %2\",\n        \"args0\": [\n            {\n                \"type\": \"field_input\",\n                \"name\": \"type\",\n                \"text\": \"\"\n            },\n            {\n                \"type\": \"input_statement\",\n                \"name\": \"MATCHUP\",\n                \"check\": [\n                    \"Matchup\"\n                ]\n            }\n        ],\n        \"colour\": 185,\n        \"previousStatement\": null,\n        \"nextStatement\": null\n    },\n    {\n        \"type\": \"TournamentType\",\n        \"message0\": \"TournamentType Pro %1 Amateur %2\",\n        \"args0\": [\n            {\n                \"type\": \"field_input\",\n                \"name\": \"Pro\",\n                \"text\": \"\"\n            },\n            {\n                \"type\": \"field_input\",\n                \"name\": \"Amateur\",\n                \"text\": \"\"\n            }\n        ],\n        \"colour\": 94,\n        \"output\": \"TournamentType\"\n    },\n    {\n        \"type\": \"Player\",\n        \"message0\": \"Player name %1 dateOfBirth %2 height %3 isPro %4\",\n        \"args0\": [\n            {\n                \"type\": \"field_input\",\n                \"name\": \"name\",\n                \"text\": \"\"\n            },\n            {\n                \"type\": \"field_input\",\n                \"name\": \"dateOfBirth\",\n                \"text\": \"\"\n            },\n            {\n                \"type\": \"field_input\",\n                \"name\": \"height\",\n                \"text\": \"\"\n            },\n            {\n                \"type\": \"field_input\",\n                \"name\": \"isPro\",\n                \"text\": \"\"\n            }\n        ],\n        \"colour\": 235,\n        \"output\": \"Player\"\n    },\n    {\n        \"type\": \"Game\",\n        \"message0\": \"Game attribute %1 frame %2 player %3\",\n        \"args0\": [\n            {\n                \"type\": \"field_input\",\n                \"name\": \"attribute\",\n                \"text\": \"\"\n            },\n            {\n                \"type\": \"input_statement\",\n                \"name\": \"FRAME\",\n                \"check\": [\n                    \"Frame\"\n                ]\n            },\n            {\n                \"type\": \"input_value\",\n                \"name\": \"PLAYER\",\n                \"check\": [\n                    \"Player\"\n                ]\n            }\n        ],\n        \"colour\": 162,\n        \"previousStatement\": null,\n        \"nextStatement\": null\n    },\n    {\n        \"type\": \"Matchup\",\n        \"message0\": \"Matchup attribute %1 game %2\",\n        \"args0\": [\n            {\n                \"type\": \"field_input\",\n                \"name\": \"attribute\",\n                \"text\": \"\"\n            },\n            {\n                \"type\": \"input_statement\",\n                \"name\": \"GAME\",\n                \"check\": [\n                    \"Game\"\n                ]\n            }\n        ],\n        \"colour\": 317,\n        \"previousStatement\": null,\n        \"nextStatement\": null\n    },\n    {\n        \"type\": \"Frame\",\n        \"message0\": \"Frame score %1\",\n        \"args0\": [\n            {\n                \"type\": \"field_input\",\n                \"name\": \"score\",\n                \"text\": \"\"\n            }\n        ],\n        \"colour\": 153,\n        \"output\": \"Frame\"\n    }\n];\nconst ECORE_TOOLBOX = {\n    kind: \"flyoutToolbox\",\n    contents: [\n        {\n            kind: \"block\",\n            type: \"League\"\n        },\n        {\n            kind: \"block\",\n            type: \"Tournament\"\n        },\n        {\n            kind: \"block\",\n            type: \"TournamentType\"\n        },\n        {\n            kind: \"block\",\n            type: \"Player\"\n        },\n        {\n            kind: \"block\",\n            type: \"Game\"\n        },\n        {\n            kind: \"block\",\n            type: \"Matchup\"\n        },\n        {\n            kind: \"block\",\n            type: \"Frame\"\n        }\n    ]\n};\n// Helper function to register blocks with Blockly\nfunction registerEcoreBlocks() {\n    ECORE_BLOCKS.forEach((blockDef)=>{\n        if (typeof Blockly !== 'undefined' && Blockly.Blocks) {\n            Blockly.Blocks[blockDef.type] = {\n                init: function() {\n                    this.jsonInit(blockDef);\n                }\n            };\n        }\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2Vjb3JlLWJsb2Nrcy50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0NBQXdDO0FBQ3hDLHlDQUF5QztBQUVsQyxNQUFNQSxlQUFlO0lBQzFCO1FBQ0EsUUFBUTtRQUNSLFlBQVk7UUFDWixTQUFTO1lBQ1A7Z0JBQ0UsUUFBUTtnQkFDUixRQUFRO2dCQUNSLFFBQVE7WUFDVjtZQUNBO2dCQUNFLFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixTQUFTO29CQUNQO2lCQUNEO1lBQ0g7U0FDRDtRQUNELFVBQVU7UUFDVixxQkFBcUI7UUFDckIsaUJBQWlCO0lBQ25CO0lBQ0U7UUFDQSxRQUFRO1FBQ1IsWUFBWTtRQUNaLFNBQVM7WUFDUDtnQkFDRSxRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsUUFBUTtZQUNWO1lBQ0E7Z0JBQ0UsUUFBUTtnQkFDUixRQUFRO2dCQUNSLFNBQVM7b0JBQ1A7aUJBQ0Q7WUFDSDtTQUNEO1FBQ0QsVUFBVTtRQUNWLHFCQUFxQjtRQUNyQixpQkFBaUI7SUFDbkI7SUFDRTtRQUNBLFFBQVE7UUFDUixZQUFZO1FBQ1osU0FBUztZQUNQO2dCQUNFLFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixRQUFRO1lBQ1Y7WUFDQTtnQkFDRSxRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsUUFBUTtZQUNWO1NBQ0Q7UUFDRCxVQUFVO1FBQ1YsVUFBVTtJQUNaO0lBQ0U7UUFDQSxRQUFRO1FBQ1IsWUFBWTtRQUNaLFNBQVM7WUFDUDtnQkFDRSxRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsUUFBUTtZQUNWO1lBQ0E7Z0JBQ0UsUUFBUTtnQkFDUixRQUFRO2dCQUNSLFFBQVE7WUFDVjtZQUNBO2dCQUNFLFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixRQUFRO1lBQ1Y7WUFDQTtnQkFDRSxRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsUUFBUTtZQUNWO1NBQ0Q7UUFDRCxVQUFVO1FBQ1YsVUFBVTtJQUNaO0lBQ0U7UUFDQSxRQUFRO1FBQ1IsWUFBWTtRQUNaLFNBQVM7WUFDUDtnQkFDRSxRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsUUFBUTtZQUNWO1lBQ0E7Z0JBQ0UsUUFBUTtnQkFDUixRQUFRO2dCQUNSLFNBQVM7b0JBQ1A7aUJBQ0Q7WUFDSDtZQUNBO2dCQUNFLFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixTQUFTO29CQUNQO2lCQUNEO1lBQ0g7U0FDRDtRQUNELFVBQVU7UUFDVixxQkFBcUI7UUFDckIsaUJBQWlCO0lBQ25CO0lBQ0U7UUFDQSxRQUFRO1FBQ1IsWUFBWTtRQUNaLFNBQVM7WUFDUDtnQkFDRSxRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsUUFBUTtZQUNWO1lBQ0E7Z0JBQ0UsUUFBUTtnQkFDUixRQUFRO2dCQUNSLFNBQVM7b0JBQ1A7aUJBQ0Q7WUFDSDtTQUNEO1FBQ0QsVUFBVTtRQUNWLHFCQUFxQjtRQUNyQixpQkFBaUI7SUFDbkI7SUFDRTtRQUNBLFFBQVE7UUFDUixZQUFZO1FBQ1osU0FBUztZQUNQO2dCQUNFLFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixRQUFRO1lBQ1Y7U0FDRDtRQUNELFVBQVU7UUFDVixVQUFVO0lBQ1o7Q0FDQyxDQUFVO0FBRUosTUFBTUMsZ0JBQWdCO0lBQzNCQyxNQUFNO0lBQ05DLFVBQVU7UUFDUjtZQUFDRCxNQUFNO1lBQWtCRSxNQUFNO1FBQVE7UUFDdkM7WUFBQ0YsTUFBTTtZQUFrQkUsTUFBTTtRQUFZO1FBQzNDO1lBQUNGLE1BQU07WUFBa0JFLE1BQU07UUFBZ0I7UUFDL0M7WUFBQ0YsTUFBTTtZQUFrQkUsTUFBTTtRQUFRO1FBQ3ZDO1lBQUNGLE1BQU07WUFBa0JFLE1BQU07UUFBTTtRQUNyQztZQUFDRixNQUFNO1lBQWtCRSxNQUFNO1FBQVM7UUFDeEM7WUFBQ0YsTUFBTTtZQUFrQkUsTUFBTTtRQUFPO0tBQ3ZDO0FBQ0gsRUFBVztBQUVYLGtEQUFrRDtBQUMzQyxTQUFTQztJQUNkTCxhQUFhTSxPQUFPLENBQUMsQ0FBQ0M7UUFDcEIsSUFBSSxPQUFPQyxZQUFZLGVBQWVBLFFBQVFDLE1BQU0sRUFBRTtZQUNwREQsUUFBUUMsTUFBTSxDQUFDRixTQUFTSCxJQUFJLENBQUMsR0FBRztnQkFDOUJNLE1BQU07b0JBQ0osSUFBSSxDQUFDQyxRQUFRLENBQUNKO2dCQUNoQjtZQUNGO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGh1Z29hXFxEZXNrdG9wXFxyZXBvc1xccmVwb3NcXG1ldGFtb2RlbDJibG9ja2x5XFxnZW5lcmF0ZWRcXGJvd2xpbmdfYWxsZXktdmlzdWFsY2lcXGVjb3JlLWJsb2Nrcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ3VzdG9tIEVjb3JlIG1vZGVsIGJsb2NrcyBmb3IgQmxvY2tseVxyXG4vLyBHZW5lcmF0ZWQgYXV0b21hdGljYWxseSBmcm9tIG1ldGFtb2RlbFxyXG5cclxuZXhwb3J0IGNvbnN0IEVDT1JFX0JMT0NLUyA9IFtcclxuICB7XHJcbiAgXCJ0eXBlXCI6IFwiTGVhZ3VlXCIsXHJcbiAgXCJtZXNzYWdlMFwiOiBcIkxlYWd1ZSBuYW1lICUxIHBsYXllciAlMlwiLFxyXG4gIFwiYXJnczBcIjogW1xyXG4gICAge1xyXG4gICAgICBcInR5cGVcIjogXCJmaWVsZF9pbnB1dFwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJuYW1lXCIsXHJcbiAgICAgIFwidGV4dFwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcInR5cGVcIjogXCJpbnB1dF9zdGF0ZW1lbnRcIixcclxuICAgICAgXCJuYW1lXCI6IFwiUExBWUVSXCIsXHJcbiAgICAgIFwiY2hlY2tcIjogW1xyXG4gICAgICAgIFwiUGxheWVyXCJcclxuICAgICAgXVxyXG4gICAgfVxyXG4gIF0sXHJcbiAgXCJjb2xvdXJcIjogMTkwLFxyXG4gIFwicHJldmlvdXNTdGF0ZW1lbnRcIjogbnVsbCxcclxuICBcIm5leHRTdGF0ZW1lbnRcIjogbnVsbFxyXG59LFxyXG4gIHtcclxuICBcInR5cGVcIjogXCJUb3VybmFtZW50XCIsXHJcbiAgXCJtZXNzYWdlMFwiOiBcIlRvdXJuYW1lbnQgdHlwZSAlMSBtYXRjaHVwICUyXCIsXHJcbiAgXCJhcmdzMFwiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwidHlwZVwiOiBcImZpZWxkX2lucHV0XCIsXHJcbiAgICAgIFwibmFtZVwiOiBcInR5cGVcIixcclxuICAgICAgXCJ0ZXh0XCI6IFwiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwidHlwZVwiOiBcImlucHV0X3N0YXRlbWVudFwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJNQVRDSFVQXCIsXHJcbiAgICAgIFwiY2hlY2tcIjogW1xyXG4gICAgICAgIFwiTWF0Y2h1cFwiXHJcbiAgICAgIF1cclxuICAgIH1cclxuICBdLFxyXG4gIFwiY29sb3VyXCI6IDE4NSxcclxuICBcInByZXZpb3VzU3RhdGVtZW50XCI6IG51bGwsXHJcbiAgXCJuZXh0U3RhdGVtZW50XCI6IG51bGxcclxufSxcclxuICB7XHJcbiAgXCJ0eXBlXCI6IFwiVG91cm5hbWVudFR5cGVcIixcclxuICBcIm1lc3NhZ2UwXCI6IFwiVG91cm5hbWVudFR5cGUgUHJvICUxIEFtYXRldXIgJTJcIixcclxuICBcImFyZ3MwXCI6IFtcclxuICAgIHtcclxuICAgICAgXCJ0eXBlXCI6IFwiZmllbGRfaW5wdXRcIixcclxuICAgICAgXCJuYW1lXCI6IFwiUHJvXCIsXHJcbiAgICAgIFwidGV4dFwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcInR5cGVcIjogXCJmaWVsZF9pbnB1dFwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJBbWF0ZXVyXCIsXHJcbiAgICAgIFwidGV4dFwiOiBcIlwiXHJcbiAgICB9XHJcbiAgXSxcclxuICBcImNvbG91clwiOiA5NCxcclxuICBcIm91dHB1dFwiOiBcIlRvdXJuYW1lbnRUeXBlXCJcclxufSxcclxuICB7XHJcbiAgXCJ0eXBlXCI6IFwiUGxheWVyXCIsXHJcbiAgXCJtZXNzYWdlMFwiOiBcIlBsYXllciBuYW1lICUxIGRhdGVPZkJpcnRoICUyIGhlaWdodCAlMyBpc1BybyAlNFwiLFxyXG4gIFwiYXJnczBcIjogW1xyXG4gICAge1xyXG4gICAgICBcInR5cGVcIjogXCJmaWVsZF9pbnB1dFwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJuYW1lXCIsXHJcbiAgICAgIFwidGV4dFwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcInR5cGVcIjogXCJmaWVsZF9pbnB1dFwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJkYXRlT2ZCaXJ0aFwiLFxyXG4gICAgICBcInRleHRcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJ0eXBlXCI6IFwiZmllbGRfaW5wdXRcIixcclxuICAgICAgXCJuYW1lXCI6IFwiaGVpZ2h0XCIsXHJcbiAgICAgIFwidGV4dFwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcInR5cGVcIjogXCJmaWVsZF9pbnB1dFwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJpc1Byb1wiLFxyXG4gICAgICBcInRleHRcIjogXCJcIlxyXG4gICAgfVxyXG4gIF0sXHJcbiAgXCJjb2xvdXJcIjogMjM1LFxyXG4gIFwib3V0cHV0XCI6IFwiUGxheWVyXCJcclxufSxcclxuICB7XHJcbiAgXCJ0eXBlXCI6IFwiR2FtZVwiLFxyXG4gIFwibWVzc2FnZTBcIjogXCJHYW1lIGF0dHJpYnV0ZSAlMSBmcmFtZSAlMiBwbGF5ZXIgJTNcIixcclxuICBcImFyZ3MwXCI6IFtcclxuICAgIHtcclxuICAgICAgXCJ0eXBlXCI6IFwiZmllbGRfaW5wdXRcIixcclxuICAgICAgXCJuYW1lXCI6IFwiYXR0cmlidXRlXCIsXHJcbiAgICAgIFwidGV4dFwiOiBcIlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcInR5cGVcIjogXCJpbnB1dF9zdGF0ZW1lbnRcIixcclxuICAgICAgXCJuYW1lXCI6IFwiRlJBTUVcIixcclxuICAgICAgXCJjaGVja1wiOiBbXHJcbiAgICAgICAgXCJGcmFtZVwiXHJcbiAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwidHlwZVwiOiBcImlucHV0X3ZhbHVlXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIlBMQVlFUlwiLFxyXG4gICAgICBcImNoZWNrXCI6IFtcclxuICAgICAgICBcIlBsYXllclwiXHJcbiAgICAgIF1cclxuICAgIH1cclxuICBdLFxyXG4gIFwiY29sb3VyXCI6IDE2MixcclxuICBcInByZXZpb3VzU3RhdGVtZW50XCI6IG51bGwsXHJcbiAgXCJuZXh0U3RhdGVtZW50XCI6IG51bGxcclxufSxcclxuICB7XHJcbiAgXCJ0eXBlXCI6IFwiTWF0Y2h1cFwiLFxyXG4gIFwibWVzc2FnZTBcIjogXCJNYXRjaHVwIGF0dHJpYnV0ZSAlMSBnYW1lICUyXCIsXHJcbiAgXCJhcmdzMFwiOiBbXHJcbiAgICB7XHJcbiAgICAgIFwidHlwZVwiOiBcImZpZWxkX2lucHV0XCIsXHJcbiAgICAgIFwibmFtZVwiOiBcImF0dHJpYnV0ZVwiLFxyXG4gICAgICBcInRleHRcIjogXCJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJ0eXBlXCI6IFwiaW5wdXRfc3RhdGVtZW50XCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIkdBTUVcIixcclxuICAgICAgXCJjaGVja1wiOiBbXHJcbiAgICAgICAgXCJHYW1lXCJcclxuICAgICAgXVxyXG4gICAgfVxyXG4gIF0sXHJcbiAgXCJjb2xvdXJcIjogMzE3LFxyXG4gIFwicHJldmlvdXNTdGF0ZW1lbnRcIjogbnVsbCxcclxuICBcIm5leHRTdGF0ZW1lbnRcIjogbnVsbFxyXG59LFxyXG4gIHtcclxuICBcInR5cGVcIjogXCJGcmFtZVwiLFxyXG4gIFwibWVzc2FnZTBcIjogXCJGcmFtZSBzY29yZSAlMVwiLFxyXG4gIFwiYXJnczBcIjogW1xyXG4gICAge1xyXG4gICAgICBcInR5cGVcIjogXCJmaWVsZF9pbnB1dFwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJzY29yZVwiLFxyXG4gICAgICBcInRleHRcIjogXCJcIlxyXG4gICAgfVxyXG4gIF0sXHJcbiAgXCJjb2xvdXJcIjogMTUzLFxyXG4gIFwib3V0cHV0XCI6IFwiRnJhbWVcIlxyXG59LFxyXG5dIGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IGNvbnN0IEVDT1JFX1RPT0xCT1ggPSB7XHJcbiAga2luZDogXCJmbHlvdXRUb29sYm94XCIgYXMgY29uc3QsXHJcbiAgY29udGVudHM6IFtcclxuICAgIHtraW5kOiBcImJsb2NrXCIgYXMgY29uc3QsIHR5cGU6IFwiTGVhZ3VlXCJ9LFxyXG4gICAge2tpbmQ6IFwiYmxvY2tcIiBhcyBjb25zdCwgdHlwZTogXCJUb3VybmFtZW50XCJ9LFxyXG4gICAge2tpbmQ6IFwiYmxvY2tcIiBhcyBjb25zdCwgdHlwZTogXCJUb3VybmFtZW50VHlwZVwifSxcclxuICAgIHtraW5kOiBcImJsb2NrXCIgYXMgY29uc3QsIHR5cGU6IFwiUGxheWVyXCJ9LFxyXG4gICAge2tpbmQ6IFwiYmxvY2tcIiBhcyBjb25zdCwgdHlwZTogXCJHYW1lXCJ9LFxyXG4gICAge2tpbmQ6IFwiYmxvY2tcIiBhcyBjb25zdCwgdHlwZTogXCJNYXRjaHVwXCJ9LFxyXG4gICAge2tpbmQ6IFwiYmxvY2tcIiBhcyBjb25zdCwgdHlwZTogXCJGcmFtZVwifSxcclxuICBdLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGJsb2NrcyB3aXRoIEJsb2NrbHlcclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRWNvcmVCbG9ja3MoKSB7XHJcbiAgRUNPUkVfQkxPQ0tTLmZvckVhY2goKGJsb2NrRGVmKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIEJsb2NrbHkgIT09ICd1bmRlZmluZWQnICYmIEJsb2NrbHkuQmxvY2tzKSB7XHJcbiAgICAgIEJsb2NrbHkuQmxvY2tzW2Jsb2NrRGVmLnR5cGVdID0ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgdGhpcy5qc29uSW5pdChibG9ja0RlZik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJFQ09SRV9CTE9DS1MiLCJFQ09SRV9UT09MQk9YIiwia2luZCIsImNvbnRlbnRzIiwidHlwZSIsInJlZ2lzdGVyRWNvcmVCbG9ja3MiLCJmb3JFYWNoIiwiYmxvY2tEZWYiLCJCbG9ja2x5IiwiQmxvY2tzIiwiaW5pdCIsImpzb25Jbml0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./ecore-blocks.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/api/script.js":
/*!**********************************************!*\
  !*** ./node_modules/next/dist/api/script.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport default from dynamic */ _client_script__WEBPACK_IMPORTED_MODULE_0___default.a)\n/* harmony export */ });\n/* harmony import */ var _client_script__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client/script */ \"(app-pages-browser)/./node_modules/next/dist/client/script.js\");\n/* harmony import */ var _client_script__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_client_script__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _client_script__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _client_script__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n//# sourceMappingURL=script.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL3NjcmlwdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMkM7QUFDVjs7QUFFakMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaHVnb2FcXERlc2t0b3BcXHJlcG9zXFxyZXBvc1xcbWV0YW1vZGVsMmJsb2NrbHlcXGdlbmVyYXRlZFxcYm93bGluZ19hbGxleS12aXN1YWxjaVxcbm9kZV9tb2R1bGVzXFxuZXh0XFxkaXN0XFxhcGlcXHNjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi4vY2xpZW50L3NjcmlwdCc7XG5leHBvcnQgKiBmcm9tICcuLi9jbGllbnQvc2NyaXB0JztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NyaXB0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/api/script.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    cancelIdleCallback: function() {\n        return cancelIdleCallback;\n    },\n    requestIdleCallback: function() {\n        return requestIdleCallback;\n    }\n});\nconst requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function(cb) {\n    let start = Date.now();\n    return self.setTimeout(function() {\n        cb({\n            didTimeout: false,\n            timeRemaining: function() {\n                return Math.max(0, 50 - (Date.now() - start));\n            }\n        });\n    }, 1);\n};\nconst cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function(id) {\n    return clearTimeout(id);\n};\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=request-idle-callback.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7SUFnQmFBLGtCQUFrQjtlQUFsQkE7O0lBaEJBQyxtQkFBbUI7ZUFBbkJBOzs7QUFBTixNQUFNQSxzQkFDVixPQUFPQyxTQUFTLGVBQ2ZBLEtBQUtELG1CQUFtQixJQUN4QkMsS0FBS0QsbUJBQW1CLENBQUNFLElBQUksQ0FBQ0MsV0FDaEMsU0FBVUMsRUFBdUI7SUFDL0IsSUFBSUMsUUFBUUMsS0FBS0MsR0FBRztJQUNwQixPQUFPTixLQUFLTyxVQUFVLENBQUM7UUFDckJKLEdBQUc7WUFDREssWUFBWTtZQUNaQyxlQUFlO2dCQUNiLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQyxHQUFHLEtBQU1OLENBQUFBLEtBQUtDLEdBQUcsS0FBS0YsS0FBQUEsQ0FBSTtZQUM1QztRQUNGO0lBQ0YsR0FBRztBQUNMO0FBRUssTUFBTU4scUJBQ1YsT0FBT0UsU0FBUyxlQUNmQSxLQUFLRixrQkFBa0IsSUFDdkJFLEtBQUtGLGtCQUFrQixDQUFDRyxJQUFJLENBQUNDLFdBQy9CLFNBQVVVLEVBQVU7SUFDbEIsT0FBT0MsYUFBYUQ7QUFDdEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaHVnb2FcXERlc2t0b3BcXHJlcG9zXFxyZXBvc1xcbWV0YW1vZGVsMmJsb2NrbHlcXHNyY1xcY2xpZW50XFxyZXF1ZXN0LWlkbGUtY2FsbGJhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPVxuICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmXG4gICAgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICYmXG4gICAgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSkgfHxcbiAgZnVuY3Rpb24gKGNiOiBJZGxlUmVxdWVzdENhbGxiYWNrKTogbnVtYmVyIHtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgcmV0dXJuIHNlbGYuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBjYih7XG4gICAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIDUwIC0gKERhdGUubm93KCkgLSBzdGFydCkpXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH0sIDEpXG4gIH1cblxuZXhwb3J0IGNvbnN0IGNhbmNlbElkbGVDYWxsYmFjayA9XG4gICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBzZWxmLmNhbmNlbElkbGVDYWxsYmFjayAmJlxuICAgIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSkgfHxcbiAgZnVuY3Rpb24gKGlkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKVxuICB9XG4iXSwibmFtZXMiOlsiY2FuY2VsSWRsZUNhbGxiYWNrIiwicmVxdWVzdElkbGVDYWxsYmFjayIsInNlbGYiLCJiaW5kIiwid2luZG93IiwiY2IiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJzZXRUaW1lb3V0IiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCJNYXRoIiwibWF4IiwiaWQiLCJjbGVhclRpbWVvdXQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/script.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/script.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return _default;\n    },\n    handleClientScriptLoad: function() {\n        return handleClientScriptLoad;\n    },\n    initScriptLoader: function() {\n        return initScriptLoader;\n    }\n});\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _reactdom = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\"));\nconst _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _headmanagercontextsharedruntime = __webpack_require__(/*! ../shared/lib/head-manager-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.js\");\nconst _setattributesfromprops = __webpack_require__(/*! ./set-attributes-from-props */ \"(app-pages-browser)/./node_modules/next/dist/client/set-attributes-from-props.js\");\nconst _requestidlecallback = __webpack_require__(/*! ./request-idle-callback */ \"(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js\");\nconst ScriptCache = new Map();\nconst LoadCache = new Set();\nconst insertStylesheets = (stylesheets)=>{\n    // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad\n    //\n    // Using ReactDOM.preinit to feature detect appDir and inject styles\n    // Stylesheets might have already been loaded if initialized with Script component\n    // Re-inject styles here to handle scripts loaded via handleClientScriptLoad\n    // ReactDOM.preinit handles dedup and ensures the styles are loaded only once\n    if (_reactdom.default.preinit) {\n        stylesheets.forEach((stylesheet)=>{\n            _reactdom.default.preinit(stylesheet, {\n                as: 'style'\n            });\n        });\n        return;\n    }\n    // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad\n    //\n    // We use this function to load styles when appdir is not detected\n    // TODO: Use React float APIs to load styles once available for pages dir\n    if (true) {\n        let head = document.head;\n        stylesheets.forEach((stylesheet)=>{\n            let link = document.createElement('link');\n            link.type = 'text/css';\n            link.rel = 'stylesheet';\n            link.href = stylesheet;\n            head.appendChild(link);\n        });\n    }\n};\nconst loadScript = (props)=>{\n    const { src, id, onLoad = ()=>{}, onReady = null, dangerouslySetInnerHTML, children = '', strategy = 'afterInteractive', onError, stylesheets } = props;\n    const cacheKey = id || src;\n    // Script has already loaded\n    if (cacheKey && LoadCache.has(cacheKey)) {\n        return;\n    }\n    // Contents of this script are already loading/loaded\n    if (ScriptCache.has(src)) {\n        LoadCache.add(cacheKey);\n        // It is possible that multiple `next/script` components all have same \"src\", but has different \"onLoad\"\n        // This is to make sure the same remote script will only load once, but \"onLoad\" are executed in order\n        ScriptCache.get(src).then(onLoad, onError);\n        return;\n    }\n    /** Execute after the script first loaded */ const afterLoad = ()=>{\n        // Run onReady for the first time after load event\n        if (onReady) {\n            onReady();\n        }\n        // add cacheKey to LoadCache when load successfully\n        LoadCache.add(cacheKey);\n    };\n    const el = document.createElement('script');\n    const loadPromise = new Promise((resolve, reject)=>{\n        el.addEventListener('load', function(e) {\n            resolve();\n            if (onLoad) {\n                onLoad.call(this, e);\n            }\n            afterLoad();\n        });\n        el.addEventListener('error', function(e) {\n            reject(e);\n        });\n    }).catch(function(e) {\n        if (onError) {\n            onError(e);\n        }\n    });\n    if (dangerouslySetInnerHTML) {\n        // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n        el.innerHTML = dangerouslySetInnerHTML.__html || '';\n        afterLoad();\n    } else if (children) {\n        el.textContent = typeof children === 'string' ? children : Array.isArray(children) ? children.join('') : '';\n        afterLoad();\n    } else if (src) {\n        el.src = src;\n        // do not add cacheKey into LoadCache for remote script here\n        // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)\n        ScriptCache.set(src, loadPromise);\n    }\n    (0, _setattributesfromprops.setAttributesFromProps)(el, props);\n    if (strategy === 'worker') {\n        el.setAttribute('type', 'text/partytown');\n    }\n    el.setAttribute('data-nscript', strategy);\n    // Load styles associated with this script\n    if (stylesheets) {\n        insertStylesheets(stylesheets);\n    }\n    document.body.appendChild(el);\n};\nfunction handleClientScriptLoad(props) {\n    const { strategy = 'afterInteractive' } = props;\n    if (strategy === 'lazyOnload') {\n        window.addEventListener('load', ()=>{\n            (0, _requestidlecallback.requestIdleCallback)(()=>loadScript(props));\n        });\n    } else {\n        loadScript(props);\n    }\n}\nfunction loadLazyScript(props) {\n    if (document.readyState === 'complete') {\n        (0, _requestidlecallback.requestIdleCallback)(()=>loadScript(props));\n    } else {\n        window.addEventListener('load', ()=>{\n            (0, _requestidlecallback.requestIdleCallback)(()=>loadScript(props));\n        });\n    }\n}\nfunction addBeforeInteractiveToCache() {\n    const scripts = [\n        ...document.querySelectorAll('[data-nscript=\"beforeInteractive\"]'),\n        ...document.querySelectorAll('[data-nscript=\"beforePageRender\"]')\n    ];\n    scripts.forEach((script)=>{\n        const cacheKey = script.id || script.getAttribute('src');\n        LoadCache.add(cacheKey);\n    });\n}\nfunction initScriptLoader(scriptLoaderItems) {\n    scriptLoaderItems.forEach(handleClientScriptLoad);\n    addBeforeInteractiveToCache();\n}\n/**\n * Load a third-party scripts in an optimized way.\n *\n * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)\n */ function Script(props) {\n    const { id, src = '', onLoad = ()=>{}, onReady = null, strategy = 'afterInteractive', onError, stylesheets, ...restProps } = props;\n    // Context is available only during SSR\n    const { updateScripts, scripts, getIsSsr, appDir, nonce } = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);\n    /**\n   * - First mount:\n   *   1. The useEffect for onReady executes\n   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)\n   *      onReady is skipped, set hasOnReadyEffectCalled.current to true\n   *   3. The useEffect for loadScript executes\n   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes\n   *      Once the script is loaded, the onLoad and onReady will be called by then\n   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n   *   5. The useEffect for onReady executes again\n   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n   *   7. The useEffect for loadScript executes again\n   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n   *\n   * - Second mount:\n   *   1. The useEffect for onReady executes\n   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)\n   *      onReady is called, set hasOnReadyEffectCalled.current to true\n   *   3. The useEffect for loadScript executes\n   *   4. The script is already loaded, loadScript bails out\n   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n   *   5. The useEffect for onReady executes again\n   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n   *   7. The useEffect for loadScript executes again\n   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n   */ const hasOnReadyEffectCalled = (0, _react.useRef)(false);\n    (0, _react.useEffect)(()=>{\n        const cacheKey = id || src;\n        if (!hasOnReadyEffectCalled.current) {\n            // Run onReady if script has loaded before but component is re-mounted\n            if (onReady && cacheKey && LoadCache.has(cacheKey)) {\n                onReady();\n            }\n            hasOnReadyEffectCalled.current = true;\n        }\n    }, [\n        onReady,\n        id,\n        src\n    ]);\n    const hasLoadScriptEffectCalled = (0, _react.useRef)(false);\n    (0, _react.useEffect)(()=>{\n        if (!hasLoadScriptEffectCalled.current) {\n            if (strategy === 'afterInteractive') {\n                loadScript(props);\n            } else if (strategy === 'lazyOnload') {\n                loadLazyScript(props);\n            }\n            hasLoadScriptEffectCalled.current = true;\n        }\n    }, [\n        props,\n        strategy\n    ]);\n    if (strategy === 'beforeInteractive' || strategy === 'worker') {\n        if (updateScripts) {\n            scripts[strategy] = (scripts[strategy] || []).concat([\n                {\n                    id,\n                    src,\n                    onLoad,\n                    onReady,\n                    onError,\n                    ...restProps\n                }\n            ]);\n            updateScripts(scripts);\n        } else if (getIsSsr && getIsSsr()) {\n            // Script has already loaded during SSR\n            LoadCache.add(id || src);\n        } else if (getIsSsr && !getIsSsr()) {\n            loadScript(props);\n        }\n    }\n    // For the app directory, we need React Float to preload these scripts.\n    if (appDir) {\n        // Injecting stylesheets here handles beforeInteractive and worker scripts correctly\n        // For other strategies injecting here ensures correct stylesheet order\n        // ReactDOM.preinit handles loading the styles in the correct order,\n        // also ensures the stylesheet is loaded only once and in a consistent manner\n        //\n        // Case 1: Styles for beforeInteractive/worker with appDir - handled here\n        // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet\n        // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here\n        // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function\n        if (stylesheets) {\n            stylesheets.forEach((styleSrc)=>{\n                _reactdom.default.preinit(styleSrc, {\n                    as: 'style'\n                });\n            });\n        }\n        // Before interactive scripts need to be loaded by Next.js' runtime instead\n        // of native <script> tags, because they no longer have `defer`.\n        if (strategy === 'beforeInteractive') {\n            if (!src) {\n                // For inlined scripts, we put the content in `children`.\n                if (restProps.dangerouslySetInnerHTML) {\n                    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n                    restProps.children = restProps.dangerouslySetInnerHTML.__html;\n                    delete restProps.dangerouslySetInnerHTML;\n                }\n                return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"script\", {\n                    nonce: nonce,\n                    dangerouslySetInnerHTML: {\n                        __html: \"(self.__next_s=self.__next_s||[]).push(\" + JSON.stringify([\n                            0,\n                            {\n                                ...restProps,\n                                id\n                            }\n                        ]) + \")\"\n                    }\n                });\n            } else {\n                // @ts-ignore\n                _reactdom.default.preload(src, restProps.integrity ? {\n                    as: 'script',\n                    integrity: restProps.integrity,\n                    nonce,\n                    crossOrigin: restProps.crossOrigin\n                } : {\n                    as: 'script',\n                    nonce,\n                    crossOrigin: restProps.crossOrigin\n                });\n                return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"script\", {\n                    nonce: nonce,\n                    dangerouslySetInnerHTML: {\n                        __html: \"(self.__next_s=self.__next_s||[]).push(\" + JSON.stringify([\n                            src,\n                            {\n                                ...restProps,\n                                id\n                            }\n                        ]) + \")\"\n                    }\n                });\n            }\n        } else if (strategy === 'afterInteractive') {\n            if (src) {\n                // @ts-ignore\n                _reactdom.default.preload(src, restProps.integrity ? {\n                    as: 'script',\n                    integrity: restProps.integrity,\n                    nonce,\n                    crossOrigin: restProps.crossOrigin\n                } : {\n                    as: 'script',\n                    nonce,\n                    crossOrigin: restProps.crossOrigin\n                });\n            }\n        }\n    }\n    return null;\n}\n_c = Script;\nObject.defineProperty(Script, '__nextScript', {\n    value: true\n});\nconst _default = Script;\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=script.js.map\nvar _c;\n$RefreshReg$(_c, \"Script\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/script.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/set-attributes-from-props.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/client/set-attributes-from-props.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"setAttributesFromProps\", ({\n    enumerable: true,\n    get: function() {\n        return setAttributesFromProps;\n    }\n}));\nconst DOMAttributeNames = {\n    acceptCharset: 'accept-charset',\n    className: 'class',\n    htmlFor: 'for',\n    httpEquiv: 'http-equiv',\n    noModule: 'noModule'\n};\nconst ignoreProps = [\n    'onLoad',\n    'onReady',\n    'dangerouslySetInnerHTML',\n    'children',\n    'onError',\n    'strategy',\n    'stylesheets'\n];\nfunction isBooleanScriptAttribute(attr) {\n    return [\n        'async',\n        'defer',\n        'noModule'\n    ].includes(attr);\n}\nfunction setAttributesFromProps(el, props) {\n    for (const [p, value] of Object.entries(props)){\n        if (!props.hasOwnProperty(p)) continue;\n        if (ignoreProps.includes(p)) continue;\n        // we don't render undefined props to the DOM\n        if (value === undefined) {\n            continue;\n        }\n        const attr = DOMAttributeNames[p] || p.toLowerCase();\n        if (el.tagName === 'SCRIPT' && isBooleanScriptAttribute(attr)) {\n            // Correctly assign boolean script attributes\n            // https://github.com/vercel/next.js/pull/20748\n            ;\n            el[attr] = !!value;\n        } else {\n            el.setAttribute(attr, String(value));\n        }\n        // Remove falsy non-zero boolean attributes so they are correctly interpreted\n        // (e.g. if we set them to false, this coerces to the string \"false\", which the browser interprets as true)\n        if (value === false || el.tagName === 'SCRIPT' && isBooleanScriptAttribute(attr) && (!value || value === 'false')) {\n            // Call setAttribute before, as we need to set and unset the attribute to override force async:\n            // https://html.spec.whatwg.org/multipage/scripting.html#script-force-async\n            el.setAttribute(attr, '');\n            el.removeAttribute(attr);\n        }\n    }\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=set-attributes-from-props.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3NldC1hdHRyaWJ1dGVzLWZyb20tcHJvcHMuanMiLCJtYXBwaW5ncyI6Ijs7OzswREF3QmdCQTs7O2VBQUFBOzs7QUF4QmhCLE1BQU1DLG9CQUE0QztJQUNoREMsZUFBZTtJQUNmQyxXQUFXO0lBQ1hDLFNBQVM7SUFDVEMsV0FBVztJQUNYQyxVQUFVO0FBQ1o7QUFFQSxNQUFNQyxjQUFjO0lBQ2xCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxTQUFTQyx5QkFDUEMsSUFBWTtJQUVaLE9BQU87UUFBQztRQUFTO1FBQVM7S0FBVyxDQUFDQyxRQUFRLENBQUNEO0FBQ2pEO0FBRU8sU0FBU1QsdUJBQXVCVyxFQUFlLEVBQUVDLEtBQWE7SUFDbkUsS0FBSyxNQUFNLENBQUNDLEdBQUdDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDSixPQUFRO1FBQzlDLElBQUksQ0FBQ0EsTUFBTUssY0FBYyxDQUFDSixJQUFJO1FBQzlCLElBQUlOLFlBQVlHLFFBQVEsQ0FBQ0csSUFBSTtRQUU3Qiw2Q0FBNkM7UUFDN0MsSUFBSUMsVUFBVUksV0FBVztZQUN2QjtRQUNGO1FBRUEsTUFBTVQsT0FBT1IsaUJBQWlCLENBQUNZLEVBQUUsSUFBSUEsRUFBRU0sV0FBVztRQUVsRCxJQUFJUixHQUFHUyxPQUFPLEtBQUssWUFBWVoseUJBQXlCQyxPQUFPO1lBQzdELDZDQUE2QztZQUM3QywrQ0FBK0M7O1lBQzdDRSxFQUF3QixDQUFDRixLQUFLLEdBQUcsQ0FBQyxDQUFDSztRQUN2QyxPQUFPO1lBQ0xILEdBQUdVLFlBQVksQ0FBQ1osTUFBTWEsT0FBT1I7UUFDL0I7UUFFQSw2RUFBNkU7UUFDN0UsMkdBQTJHO1FBQzNHLElBQ0VBLFVBQVUsU0FDVEgsR0FBR1MsT0FBTyxLQUFLLFlBQ2RaLHlCQUF5QkMsU0FDeEIsRUFBQ0ssU0FBU0EsVUFBVSxRQUFNLEVBQzdCO1lBQ0EsK0ZBQStGO1lBQy9GLDJFQUEyRTtZQUMzRUgsR0FBR1UsWUFBWSxDQUFDWixNQUFNO1lBQ3RCRSxHQUFHWSxlQUFlLENBQUNkO1FBQ3JCO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxodWdvYVxcRGVza3RvcFxccmVwb3NcXHJlcG9zXFxtZXRhbW9kZWwyYmxvY2tseVxcc3JjXFxjbGllbnRcXHNldC1hdHRyaWJ1dGVzLWZyb20tcHJvcHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRE9NQXR0cmlidXRlTmFtZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXG4gIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgaHRtbEZvcjogJ2ZvcicsXG4gIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnLFxuICBub01vZHVsZTogJ25vTW9kdWxlJyxcbn1cblxuY29uc3QgaWdub3JlUHJvcHMgPSBbXG4gICdvbkxvYWQnLFxuICAnb25SZWFkeScsXG4gICdkYW5nZXJvdXNseVNldElubmVySFRNTCcsXG4gICdjaGlsZHJlbicsXG4gICdvbkVycm9yJyxcbiAgJ3N0cmF0ZWd5JyxcbiAgJ3N0eWxlc2hlZXRzJyxcbl1cblxuZnVuY3Rpb24gaXNCb29sZWFuU2NyaXB0QXR0cmlidXRlKFxuICBhdHRyOiBzdHJpbmdcbik6IGF0dHIgaXMgJ2FzeW5jJyB8ICdkZWZlcicgfCAnbm9Nb2R1bGUnIHtcbiAgcmV0dXJuIFsnYXN5bmMnLCAnZGVmZXInLCAnbm9Nb2R1bGUnXS5pbmNsdWRlcyhhdHRyKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0QXR0cmlidXRlc0Zyb21Qcm9wcyhlbDogSFRNTEVsZW1lbnQsIHByb3BzOiBvYmplY3QpIHtcbiAgZm9yIChjb25zdCBbcCwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkocCkpIGNvbnRpbnVlXG4gICAgaWYgKGlnbm9yZVByb3BzLmluY2x1ZGVzKHApKSBjb250aW51ZVxuXG4gICAgLy8gd2UgZG9uJ3QgcmVuZGVyIHVuZGVmaW5lZCBwcm9wcyB0byB0aGUgRE9NXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgY29uc3QgYXR0ciA9IERPTUF0dHJpYnV0ZU5hbWVzW3BdIHx8IHAudG9Mb3dlckNhc2UoKVxuXG4gICAgaWYgKGVsLnRhZ05hbWUgPT09ICdTQ1JJUFQnICYmIGlzQm9vbGVhblNjcmlwdEF0dHJpYnV0ZShhdHRyKSkge1xuICAgICAgLy8gQ29ycmVjdGx5IGFzc2lnbiBib29sZWFuIHNjcmlwdCBhdHRyaWJ1dGVzXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL25leHQuanMvcHVsbC8yMDc0OFxuICAgICAgOyhlbCBhcyBIVE1MU2NyaXB0RWxlbWVudClbYXR0cl0gPSAhIXZhbHVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyLCBTdHJpbmcodmFsdWUpKVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBmYWxzeSBub24temVybyBib29sZWFuIGF0dHJpYnV0ZXMgc28gdGhleSBhcmUgY29ycmVjdGx5IGludGVycHJldGVkXG4gICAgLy8gKGUuZy4gaWYgd2Ugc2V0IHRoZW0gdG8gZmFsc2UsIHRoaXMgY29lcmNlcyB0byB0aGUgc3RyaW5nIFwiZmFsc2VcIiwgd2hpY2ggdGhlIGJyb3dzZXIgaW50ZXJwcmV0cyBhcyB0cnVlKVxuICAgIGlmIChcbiAgICAgIHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgKGVsLnRhZ05hbWUgPT09ICdTQ1JJUFQnICYmXG4gICAgICAgIGlzQm9vbGVhblNjcmlwdEF0dHJpYnV0ZShhdHRyKSAmJlxuICAgICAgICAoIXZhbHVlIHx8IHZhbHVlID09PSAnZmFsc2UnKSlcbiAgICApIHtcbiAgICAgIC8vIENhbGwgc2V0QXR0cmlidXRlIGJlZm9yZSwgYXMgd2UgbmVlZCB0byBzZXQgYW5kIHVuc2V0IHRoZSBhdHRyaWJ1dGUgdG8gb3ZlcnJpZGUgZm9yY2UgYXN5bmM6XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzY3JpcHQtZm9yY2UtYXN5bmNcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyLCAnJylcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyKVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbInNldEF0dHJpYnV0ZXNGcm9tUHJvcHMiLCJET01BdHRyaWJ1dGVOYW1lcyIsImFjY2VwdENoYXJzZXQiLCJjbGFzc05hbWUiLCJodG1sRm9yIiwiaHR0cEVxdWl2Iiwibm9Nb2R1bGUiLCJpZ25vcmVQcm9wcyIsImlzQm9vbGVhblNjcmlwdEF0dHJpYnV0ZSIsImF0dHIiLCJpbmNsdWRlcyIsImVsIiwicHJvcHMiLCJwIiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwiaGFzT3duUHJvcGVydHkiLCJ1bmRlZmluZWQiLCJ0b0xvd2VyQ2FzZSIsInRhZ05hbWUiLCJzZXRBdHRyaWJ1dGUiLCJTdHJpbmciLCJyZW1vdmVBdHRyaWJ1dGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/set-attributes-from-props.js\n"));

/***/ })

}]);